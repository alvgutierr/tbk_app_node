#!/usr/bin/env node
const app = require('../app');
const http = require('http');
const { Server } = require('socket.io');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

// --- Socket.IO ---
const io = new Server(server, {
  cors: { origin: '*', methods: ['GET','POST'] }
});
// expÃ³n io para usarlo en las rutas: req.app.get('io')
app.set('io', io);

// logs bÃ¡sicos de conexiones
io.on('connection', (socket) => {
  console.log(`ðŸ”Œ socket conectado: ${socket.id}`);
  socket.on('disconnect', () => console.log(`ðŸ”Œ socket desconectado: ${socket.id}`));
});

// --- Start ---
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// --- Utils ---
function normalizePort(val) {
  const p = parseInt(val, 10);
  if (isNaN(p)) return val;     // named pipe
  if (p >= 0) return p;         // port number
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':  console.error(bind + ' requires elevated privileges'); process.exit(1);
    case 'EADDRINUSE': console.error(bind + ' is already in use'); process.exit(1);
    default: throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  console.log('Server listening on ' + bind + ' ðŸš€');
}

// Cierre limpio (opcional pero recomendado)
['SIGINT','SIGTERM'].forEach(signal => {
  process.on(signal, () => {
    console.log(`\n${signal} recibido, cerrando servidorâ€¦`);
    io.close(() => server.close(() => process.exit(0)));
  });
});
